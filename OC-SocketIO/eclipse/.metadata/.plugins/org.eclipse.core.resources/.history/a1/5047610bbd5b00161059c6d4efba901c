package fr.io.block;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;

import org.json.JSONArray;
import org.json.JSONObject;

import cpw.mods.fml.common.Optional;
import io.socket.client.IO;
import io.socket.client.Socket;
import io.socket.emitter.Emitter;
import li.cil.oc.api.machine.Arguments;
import li.cil.oc.api.machine.Callback;
import li.cil.oc.api.machine.Context;
import li.cil.oc.api.network.SimpleComponent;
import net.minecraft.tileentity.TileEntity;

public class SocketTileEntity extends TileEntity implements SimpleComponent  {

	private Socket socket;
	private ArrayList<String> events;
	private ArrayList<Object[]> messages; 
	
	public SocketTileEntity() {
		this.events = new ArrayList<String>();
		this.messages = new ArrayList<Object[]>();
		
		try {
			this.socket = IO.socket("http://127.0.0.1:8080");
		} catch (URISyntaxException e) {
			PrintWriter pw = null;
			try {
				pw = new PrintWriter(new File("fichierError.log"));
				e.printStackTrace(pw);
			} catch (FileNotFoundException e1) {
			} finally {
				if (pw != null) {
					pw.close();
				}
			}
		}
	}
	
	@Override
	public String getComponentName() {
		return "socketio";
	}
	
	@Callback
	@Optional.Method(modid = "OpenComputers")
	public Object[] connect(Context context, Arguments args) {
		boolean result = false;
		String message = "Missing arguments";
		
		if (args.count() == 1) {
			try {
				String url = args.checkString(0);
				
				
				//this.socket = IO.socket(url);
				this.socket.connect();
				
				result = true;
				message = null;
			} catch (Exception e) {
				//message = "Connection failed to SocketIO";
				System.out.println("---------------------------------");
				System.out.println("---------------------------------");
				System.out.println("---------------------------------");
				e.printStackTrace();
				System.out.println("---------------------------------");
				System.out.println("---------------------------------");
				System.out.println("---------------------------------");
				message = "ERROR: ";
			}
		}
		
		return new Object[] {
			result,
			message
		};
	}
	
	@Callback
	@Optional.Method(modid = "OpenComputers")
	public Object[] disconnect(Context context, Arguments args) {
		boolean result = false;
		
		if ((Boolean)this.isConnected(context, args)[0]) {
			this.socket.disconnect();
			result = true;
		}
		
		return new Object[] {
				result
		};
	}
	
	@Callback
	@Optional.Method(modid = "OpenComputers")
	public Object[] isConnected(Context context, Arguments args) {
		return new Object[] {
				(this.socket != null && this.socket instanceof Socket && this.socket.connected())
		};
	}

	@Callback
	@Optional.Method(modid = "OpenComputers")
	public Object[] emit(Context context, Arguments args) {
		boolean result = false;
		String message = "Missing arguments";
		
		if (args.count() > 1) {
			Object[] arguments = new Object[args.count() - 1];
			for (int i = 1; i < args.count(); i += 1) {
				arguments[i - 1] = args.checkAny(i);
			}
			this.socket.emit(args.checkString(0), arguments, null);
			
			result = true;
			message = "";
		}
		
		return new Object[] {
				result,
				message
		};
	}
	
	public void addOn(String event, Object[] args) {
		this.events.add(event);
		this.messages.add(args);
	}
	
	@Callback
	@Optional.Method(modid = "OpenComputers")
	public Object[] add(Context context, Arguments args) {
		if (args.count() == 1 && (Boolean)this.isConnected(context, args)[0]) {
			final String name = args.checkString(0);
			this.socket.on(name, new Emitter.Listener() {
				
				@Override
				public void call(Object... args) {
					addOn(name, args);
				}
			});
		}
		
		return null;
	}
	
	@Callback
	@Optional.Method(modid = "OpenComputers")
	public Object[] on(Context context, Arguments args) {
		String event = "";
		Object[] arguments = null;
		
		if (!this.events.isEmpty()) {
			event = this.events.remove(0);
			arguments = this.messages.remove(0);
		}
		
		return new Object[] {
				event,
				arguments
		};
	}
	
	@Callback
	@Optional.Method(modid = "OpenComputers")
	public Object[] sendTest(Context context, Arguments args) throws Exception {
		final Socket socket;
			socket = IO.socket("http://localhost:5000");
			socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
	
			  @Override
			  public void call(Object... args) {
			    socket.emit("say", "hi");
			  }
	
			}).on("response", new Emitter.Listener() {
	
			  @Override
			  public void call(Object... args) {
				  System.out.println(args[0]);
			  }
	
			}).on(Socket.EVENT_DISCONNECT, new Emitter.Listener() {
	
			  @Override
			  public void call(Object... args) {}
	
			});
			socket.connect();
		
		return new Object[] {
				true
		};
	}
	
}
